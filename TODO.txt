------------------------------------------------------------------------------
{ DONE {
------------------------------------------------------------------------------
- Finish Hash, Hash_test, and Hash+Object integration.

- Cycle detection and cycle breaking in garbage collector.

- bug. Function calls are incrementing the reference count for the called
  function object. There must be unbalanced rc incr/decr somewhere in the 
  call chain.


- Fix rc leak in 'quote' form.
  DONE: leak was coming from Object_uop_head.

- wasm build's '.env' printout does not show the Hash val correctly, it instead
  repeats the key twice. Nothing is broken, but looks visually strange when printing
  out the top-level Environment.
  keywords: bug, bug-low-impact.
  DONE: This was caused by passing va_list as a value instead of as a pointer.

- Create WASM tests using a runner like wasm-time. Similar to native build tests,
  the runner's output should be the same as that of Racket.
  DONE: tc_racket now compares output of wasm build using wasmtime.

- bug. Function calls to lambda are leaving behind tmp Environment 
  in memory. See ./test/sample/lambda_003.lsp
  DONE: the issue was that I was creating two temporary environments,
  and zipping the params into each one, stupid mistake.

- bug. cmp functions in Lisp.c are leaking refcount. It should release RC. See
  cmp_lte as an example.
  DONE: fixed all cmp functions.

- write a test to ensure that cmp functions do not result in left over 
  argument objects. After N comparisons with two arguments, the number of
  constructed objects should remain the same.
  DONE: see Lisp_test.c

- bug. When running with load lambda_003 multiple times, old functions and
  environments are not being released/collected as expected.
  DONE: the problem here was similar to one seen before, due to Environment 
  being double linked.

------------------------------------------------------------------------------
} DONE }
------------------------------------------------------------------------------

------------------------------------------------------------------------------
{ WIP {
------------------------------------------------------------------------------

------------------------------------------------------------------------------
} WIP }
------------------------------------------------------------------------------

------------------------------------------------------------------------------
{ TODO {
------------------------------------------------------------------------------

- Create memsafe.h/memsafe.c to export
  void* memsafe_malloc(size_t)
  void* memsafe_calloc(size_t)
  void  memsafe_free(void* ptr)

------------------------------------------------------------------------------
} TODO }
------------------------------------------------------------------------------
